use std::str::FromStr;

use color::Color;
use direction::Direction;
use lights::Light;
use lights::distant::Distant;
use lights::omni::Omni;
use materials::*;
use matrix::Matrix44f;
use object::Object;
use point::Point;
use sdl;
use sdl::Scene;
use shapes::Shape;
use shapes::plane::Plane;
use shapes::rectangle::XYRectangle;
use shapes::sphere::Sphere;
use system::Camera;
use texture::{Pattern,Texture};

pub scene -> Scene
  = camera:camera lights:lights objects:object+ {
    Scene {
      camera,
      lights,
      objects,
    }
  }

pub camera -> Camera
  = T<"camera"> OPEN_BRACE loc:location p:camera_lookat CLOSE_BRACE {
    Camera::new(loc, 60.0).look_at(p)
  }

location -> Point
  = T<"location"> p:point { p }

camera_lookat -> Point
  = T<"look_at"> p:point { p }

lights -> Vec<Box<Light>>
  = T<"lights"> OPEN_BRACE lights:light+ CLOSE_BRACE {
      lights
  }

light -> Box<Light>
  = omni_light
  / distant_light

pub omni_light -> Box<Light>
  = T<"omni"> OPEN_BRACE origin:point color:color intensity:light_intensity CLOSE_BRACE {
    Box::new(Omni {
      color,
      intensity,
      origin,
    })
  }

pub distant_light -> Box<Light>
  = T<"distant"> OPEN_BRACE direction:direction color:color intensity:light_intensity CLOSE_BRACE {
    Box::new(Distant {
      color,
      intensity,
      direction,
    })
  }

light_intensity -> f64
  = T<"intensity"> i:FLOAT { i }

pub object -> Object
  = T<"object">
    OPEN_BRACE
    loc:location
    shape:object_shape
    material:object_material
    transform:object_transform?
    CLOSE_BRACE
  {
    sdl::new_object(loc, shape, material, transform)
  }

object_shape -> Box<Shape>
  = sphere
  / plane
  / mesh
  / xyrect

sphere -> Box<Shape>
  = T<"sphere"> OPEN_BRACE r:sphere_radius CLOSE_BRACE {
    Box::new(Sphere::new(r))
  }

sphere_radius -> f64
  = T<"radius"> r:FLOAT { r }

plane -> Box<Shape>
  = T<"plane"> OPEN_BRACE n:plane_normal CLOSE_BRACE {
    Box::new(Plane::new(n))
  }

plane_normal -> Direction
  = T<"normal"> n:direction { n }

mesh -> Box<Shape>
  = T<"mesh"> OPEN_BRACE p:mesh_file CLOSE_BRACE {
    sdl::load_mesh_file(&p)
  }

mesh_file -> String
  = T<"file"> p:path { p }

xyrect -> Box<Shape>
  = T<"xyrect"> OPEN_BRACE T<"width"> w:FLOAT T<"height"> h:FLOAT CLOSE_BRACE {
    Box::new(XYRectangle::new(w, h))
  }

object_material -> Box<Material>
  = T<"material"> OPEN_BRACE material:material CLOSE_BRACE {
    material
  }

material -> Box<Material>
  = lambertian
    / metal
    / dielectric
    / diffuse_light

lambertian -> Box<Material>
  = T<"lambertian"> texture:texture {
    Box::new(Lambertian::new(texture))
  }

metal -> Box<Material>
  = T<"metal"> fuzz:fuzz texture:texture {
    Box::new(Metal::new(fuzz, texture))
  }

fuzz -> f64
  = T<"fuzz"> n:FLOAT { n }

dielectric -> Box<Material>
  = T<"dielectric"> ior:ior {
    Box::new(Dielectric::new(ior))
  }

ior -> f64
  = "ior" WS+ n:FLOAT { n }

diffuse_light -> Box<Material>
  = T<"diffuse_light"> texture:texture {
    Box::new(DiffuseLight::new(texture))
  }

object_transform -> Matrix44f
  = T<"transform"> OPEN_BRACE transforms:transform+ CLOSE_BRACE {
    sdl::combine_transforms(transforms)
  }

transform -> Matrix44f
  = translate
  / rotate
  / scale

translate -> Matrix44f
  = T<"translate"> d:direction {
    Matrix44f::translation(d)
  }

rotate -> Matrix44f
  = rotate_x
  / rotate_y
  / rotate_z

rotate_x -> Matrix44f
  = T<"rotate_x"> n:FLOAT {
    Matrix44f::rotation_x(n)
  }

rotate_y -> Matrix44f
  = T<"rotate_y"> n:FLOAT {
    Matrix44f::rotation_y(n)
  }

rotate_z -> Matrix44f
  = T<"rotate_z"> n:FLOAT {
    Matrix44f::rotation_z(n)
  }

scale -> Matrix44f
  = T<"scale"> d:direction {
    Matrix44f::scaling(d)
  }

texture -> Texture
  = T<"texture"> OPEN_BRACE t:(texture_solid / texture_pattern / texture_image) CLOSE_BRACE { t }

texture_solid -> Texture
  = T<"solid"> c:color {
    Texture::Solid(c)
  }

texture_pattern -> Texture
  = T<"pattern"> OPEN_BRACE p:pattern_checkerboard CLOSE_BRACE { Texture::Pattern(p) }

pattern_checkerboard -> Pattern
  = T<"checkerboard"> c1:color c2:color s:FLOAT {
    Pattern::Checkerboard(c1, c2, s)
  }

texture_image -> Texture
  = T<"image"> p:path s:FLOAT {
    Texture::Image(sdl::load_image(&p), s)
  }

path -> String
  = "\"" s:$([^"]*) "\"" WS* { String::from_str(s).unwrap() }

roughness -> f64
  = T<"roughness"> n:FLOAT { n }

highlight -> f64
  = T<"highlight"> n:FLOAT { n }

pub point -> Point
  = v:vec3 { Point::new(v.0, v.1, v.2) }

pub direction -> Direction
  = v:vec3 { Direction::new(v.0, v.1, v.2) }

pub color -> Color
  = T<("color"/"colour")> c:(std_color / rgb_color) { Color::new(c.0, c.1, c.2) }

std_color -> (f64, f64, f64)
  = T<"white">   { (1.0, 1.0, 1.0) }
  / T<"black">   { (0.0, 0.0, 0.0) }
  / T<"red">     { (1.0, 0.0, 0.0) }
  / T<"green">   { (0.0, 1.0, 0.0) }
  / T<"blue">    { (0.0, 0.0, 1.0) }
  / T<"yellow">  { (1.0, 1.0, 0.0) }
  / T<"cyan">    { (0.0, 1.0, 1.0) }
  / T<"magenta"> { (1.0, 0.0, 1.0) }

rgb_color -> (f64, f64, f64)
  = T<"rgb"> WS* v:vec3 { v }

pub vec3 -> (f64, f64, f64)
  = T<"<"> a:FLOAT T<","> b:FLOAT T<","> c: FLOAT T<">"> { (a, b, c) }

pub FLOAT -> f64
  = #quiet<s:$("-"?([0-9]+)("."[0-9]+([eE][0-9]+)?)?) WS* { f64::from_str(s).unwrap() }>
  / #expected("FLOAT")

OPEN_BRACE = T<"{">
CLOSE_BRACE = T<"}">

T<E> = HIDDEN* E HIDDEN*

HIDDEN = WS / LINE_COMMENT

LINE_COMMENT = "//" [^\n]*

WS = #quiet<[ \n\r\t]> / #expected("whitespace")
