use std::str::FromStr;

use crate::color::Color;
use crate::direction::Direction;
use crate::materials::*;
use crate::matrix::Matrix44f;
use crate::object::Object;
use crate::point::Point;
use crate::sdl;
use crate::sdl::{Scene,SceneOptions};
use crate::shapes::*;
use crate::system::{Camera,Options};
use crate::texture::{Pattern,Texture};

#![arguments(renderOptions: &Options)]

pub scene -> Scene
  = options:options? camera:camera objects:object+ {
    Scene {
      options: options.unwrap_or(SceneOptions::default()),
      camera,
      objects,
    }
  }

options -> SceneOptions
  = T<"options"> OPEN_BRACE bg:bg CLOSE_BRACE {
    SceneOptions {
      background_color: bg,
    }
  }

bg -> Color
  = T<"background"> color:color { color }

pub camera -> Camera
  = T<"camera"> OPEN_BRACE o:origin p:camera_lookat fov:fov? CLOSE_BRACE {
    Camera::new(renderOptions.width as f64, renderOptions.height as f64, fov.unwrap_or(60.0), o, p)
  }

camera_lookat -> Point
  = T<"look_at"> p:point { p }

fov -> f64
  = T<"fov"> f:FLOAT { f }

pub object -> Object
  = T<"object"> name:string? OPEN_BRACE
    shape:object_shape
    material:object_material
    CLOSE_BRACE
  {
    sdl::new_object(name, shape, material)
  }

object_shape -> Box<Shape>
  = planar_shape
  / solid_shape
  / mesh

planar_shape -> Box<Shape>
  = plane
  / xyrect
  / xzrect
  / zyrect

solid_shape -> Box<Shape>
  = sphere
  / cylinder
  / cube
  / csg
  / homogenous_medium

csg -> Box<Shape>
  = csg_union
  / csg_intersection
  / csg_difference

csg_union -> Box<Shape>
  = T<"union"> OPEN_BRACE a:solid_shape b:solid_shape transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(CSGUnion::new(a, b)), transform)
  }

csg_intersection -> Box<Shape>
  = T<"intersection"> OPEN_BRACE a:solid_shape b:solid_shape transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(CSGIntersection::new(a, b)), transform)
  }

csg_difference -> Box<Shape>
  = T<"difference"> OPEN_BRACE a:solid_shape b:solid_shape transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(CSGDifference::new(a, b)), transform)
  }

sphere -> Box<Shape>
  = T<"sphere"> OPEN_BRACE o:origin? r:radius? transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(Sphere::new(o.unwrap_or(Point::zero()), r.unwrap_or(1.0))), transform)
  }

radius -> f64
  = T<"radius"> r:FLOAT { r }

cylinder -> Box<Shape>
  = T<"cylinder"> OPEN_BRACE o:origin? r:radius? h:height? transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(Cylinder::new(o.unwrap_or(Point::zero()), r.unwrap_or(1.0), h.unwrap_or(1.0))), transform)
  }

plane -> Box<Shape>
  = T<"plane"> OPEN_BRACE o:origin? n:plane_normal transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(Plane::new(o.unwrap_or(Point::zero()), n)), transform)
  }

origin -> Point
  = T<"origin"> p:point { p }

plane_normal -> Direction
  = T<"normal"> n:direction { n }

mesh -> Box<Shape>
  = T<"mesh"> OPEN_BRACE p:mesh_file transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(sdl::load_mesh_file(&p), transform)
  }

mesh_file -> String
  = T<"file"> p:path { p }

xyrect -> Box<Shape>
  = T<"xyrect"> OPEN_BRACE o:origin? w:width h:height r:reverse? transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(XYRectangle::new(o.unwrap_or(Point::zero()), w, h, r.is_some())), transform)
  }

xzrect -> Box<Shape>
  = T<"xzrect"> OPEN_BRACE o:origin? w:width h:height r:reverse? transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(XZRectangle::new(o.unwrap_or(Point::zero()), w, h, r.is_some())), transform)
  }

zyrect -> Box<Shape>
  = T<"zyrect"> OPEN_BRACE o:origin? w:width h:height r:reverse? transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(ZYRectangle::new(o.unwrap_or(Point::zero()), w, h, r.is_some())), transform)
  }

width -> f64
  = T<"width"> w:FLOAT { w }

height -> f64
  = T<"height"> h:FLOAT { h }

reverse -> ()
  = T<"reverse">

cube -> Box<Shape>
  = T<"cube"> OPEN_BRACE p1:point p2: point transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(Cube::new(p1, p2)), transform)
  }

homogenous_medium -> Box<Shape>
  = T<"homogenous_medium"> OPEN_BRACE density:density boundary:solid_shape transform:transforms? CLOSE_BRACE {
    sdl::transform_shape(Box::new(HomogenousMedium::new(boundary, density)), transform)
  }

density -> f64
  = T<"density"> f:FLOAT {
    f
  }

object_material -> Box<Material>
  = T<"material"> OPEN_BRACE material:material CLOSE_BRACE {
    material
  }

material -> Box<Material>
  = lambertian
    / metal
    / dielectric
    / diffuse_light
    / isotropic

lambertian -> Box<Material>
  = T<"lambertian"> texture:texture {
    Box::new(Lambertian::new(texture))
  }

metal -> Box<Material>
  = T<"metal"> fuzz:fuzz texture:texture {
    Box::new(Metal::new(fuzz, texture))
  }

fuzz -> f64
  = T<"fuzz"> n:FLOAT { n }

dielectric -> Box<Material>
  = T<"dielectric"> ior:ior fuzz:fuzz? {
    Box::new(Dielectric::new(ior, fuzz.unwrap_or(0.0)))
  }

ior -> f64
  = "ior" WS+ n:FLOAT { n }

diffuse_light -> Box<Material>
  = T<"diffuse_light"> i:intensity texture:texture {
    Box::new(DiffuseLight::new(i, texture))
  }

intensity -> f64
  = T<"intensity"> n:FLOAT {
    n
  }

isotropic -> Box<Material>
  = T<"isotropic"> texture:texture {
    Box::new(Isotropic::new(texture))
  }

transforms -> Matrix44f
  = T<"transform"> OPEN_BRACE transforms:transform* CLOSE_BRACE {
    sdl::combine_transforms(transforms)
  }

transform -> Matrix44f
  = translate
  / rotate
  / scale

translate -> Matrix44f
  = T<"translate"> d:direction {
    Matrix44f::translation(d)
  }

rotate -> Matrix44f
  = rotate_x
  / rotate_y
  / rotate_z

rotate_x -> Matrix44f
  = T<"rotate_x"> n:FLOAT {
    Matrix44f::rotation_x(n)
  }

rotate_y -> Matrix44f
  = T<"rotate_y"> n:FLOAT {
    Matrix44f::rotation_y(n)
  }

rotate_z -> Matrix44f
  = T<"rotate_z"> n:FLOAT {
    Matrix44f::rotation_z(n)
  }

scale -> Matrix44f
  = T<"scale"> d:direction {
    Matrix44f::scaling(d)
  }

texture -> Texture
  = T<"texture"> OPEN_BRACE t:(texture_solid / texture_pattern / texture_image) CLOSE_BRACE { t }

texture_solid -> Texture
  = T<"solid"> c:color {
    Texture::Solid(c)
  }

texture_pattern -> Texture
  = T<"pattern"> OPEN_BRACE p:pattern_checkerboard CLOSE_BRACE { Texture::Pattern(p) }

pattern_checkerboard -> Pattern
  = T<"checkerboard"> c1:color c2:color s:FLOAT {
    Pattern::Checkerboard(c1, c2, s)
  }

texture_image -> Texture
  = T<"image"> p:path s:FLOAT {
    Texture::Image(sdl::load_image(&p), s)
  }

path -> String
  = string

string -> String
  = "\"" s:$([^"]*) "\"" WS* { String::from_str(s).unwrap() }

pub point -> Point
  = v:vec3 { Point::new(v.0, v.1, v.2) }

pub direction -> Direction
  = v:vec3 { Direction::new(v.0, v.1, v.2) }

pub color -> Color
  = T<("color"/"colour")> c:(std_color / rgb_color) { Color::new(c.0, c.1, c.2) }

std_color -> (f64, f64, f64)
  = T<"white">   { (1.0, 1.0, 1.0) }
  / T<"black">   { (0.0, 0.0, 0.0) }
  / T<"red">     { (1.0, 0.0, 0.0) }
  / T<"green">   { (0.0, 1.0, 0.0) }
  / T<"blue">    { (0.0, 0.0, 1.0) }
  / T<"yellow">  { (1.0, 1.0, 0.0) }
  / T<"cyan">    { (0.0, 1.0, 1.0) }
  / T<"magenta"> { (1.0, 0.0, 1.0) }

rgb_color -> (f64, f64, f64)
  = T<"rgb"> WS* v:vec3 { v }

pub vec3 -> (f64, f64, f64)
  = T<"<"> a:FLOAT T<","> b:FLOAT T<","> c: FLOAT T<">"> { (a, b, c) }

pub FLOAT -> f64
  = #quiet<s:$("-"?([0-9]+)("."[0-9]+([eE][0-9]+)?)?) WS* { f64::from_str(s).unwrap() }>
  / #expected("FLOAT")

OPEN_BRACE = T<"{">
CLOSE_BRACE = T<"}">

T<E> = HIDDEN* E HIDDEN*

HIDDEN = WS / LINE_COMMENT / BLOCK_COMMENT

LINE_COMMENT = "//" [^\n]*

BLOCK_COMMENT = "/*" [^*]* "*/"

WS = #quiet<[ \n\r\t]> / #expected("whitespace")
